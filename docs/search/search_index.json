{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to flocky flocky is an open-source platform for development of high quality ReaxFF reactive force fields that is based on the RiPSOGM swarm intelligence algorithm for global optimization 1 . Features Interfaced to a standalone Fortran implementation of tapered ReaxFF 2 MPI support for an asynchronous parallel optimization Flexible parameter space exploration: use of fixed parameter bounds or %change from current values Implicit multi-objective fitness function evaluation by the use of relative weights Training set format supports both finite-size and periodic systems On the fly monitoring of over-fitting during optimization On the fly Bayesian errors analysis for uncertainty quantification Citations 1 David Furman, Benny Carmeli, Yehuda Zeiri and Ronnie Kosloff, \"Enhanced Particle Swarm Optimization Algorithm: Efficient Training of ReaxFF Reactive Force Fields\", J. Chem. Theory Comput. 2018, 14 (6), 3100\u20133112 2 David Furman and David J. Wales, \"Transforming the Accuracy and Numerical Stability of ReaxFF Reactive Force Fields\", J. Phys. Chem. Lett. 2019, 10 (22), 7215-7223","title":"Introduction"},{"location":"#welcome-to-flocky","text":"flocky is an open-source platform for development of high quality ReaxFF reactive force fields that is based on the RiPSOGM swarm intelligence algorithm for global optimization 1 .","title":"Welcome to flocky"},{"location":"#features","text":"Interfaced to a standalone Fortran implementation of tapered ReaxFF 2 MPI support for an asynchronous parallel optimization Flexible parameter space exploration: use of fixed parameter bounds or %change from current values Implicit multi-objective fitness function evaluation by the use of relative weights Training set format supports both finite-size and periodic systems On the fly monitoring of over-fitting during optimization On the fly Bayesian errors analysis for uncertainty quantification","title":"Features"},{"location":"#citations","text":"1 David Furman, Benny Carmeli, Yehuda Zeiri and Ronnie Kosloff, \"Enhanced Particle Swarm Optimization Algorithm: Efficient Training of ReaxFF Reactive Force Fields\", J. Chem. Theory Comput. 2018, 14 (6), 3100\u20133112 2 David Furman and David J. Wales, \"Transforming the Accuracy and Numerical Stability of ReaxFF Reactive Force Fields\", J. Phys. Chem. Lett. 2019, 10 (22), 7215-7223","title":"Citations"},{"location":"install/","text":"Install flocky Requirements: GCC compiler (tested with 5.4.0 and 7.3.0) OpenMPI (tested with 1.10.2 and 4.0.1) or MPICH2 Boost C++ (tested with 1.70.0) Install procedure: (1) Install OpenMPI or MPICH for parallel execution (for a serial version, skip to step 2): To install mpich type: sudo apt-get install mpich For OpenMPI type: sudo apt-get install openmpi-bin (2) Install Boost C++ required libraries and header files: cd path/to/boost_1_61_0 ./bootstrap.sh --with-libraries=system,filesystem --prefix=path/to/installation/prefix ./b2 install link=static (3) Set your BOOST_LIB_PATH and BOOST_INC_PATH environment variables: export BOOST_LIB_PATH=\"path/to/installation/prefix/lib\" export BOOST_INC_PATH=\"path/to/installation/prefix/include\" (4) Finally, compile flocky (parallel version): make -f Makefile.mpi or a serial version: make -f Makefile.serial","title":"Install flocky"},{"location":"install/#install-flocky","text":"","title":"Install flocky"},{"location":"install/#requirements","text":"GCC compiler (tested with 5.4.0 and 7.3.0) OpenMPI (tested with 1.10.2 and 4.0.1) or MPICH2 Boost C++ (tested with 1.70.0)","title":"Requirements:"},{"location":"install/#install-procedure","text":"(1) Install OpenMPI or MPICH for parallel execution (for a serial version, skip to step 2): To install mpich type: sudo apt-get install mpich For OpenMPI type: sudo apt-get install openmpi-bin (2) Install Boost C++ required libraries and header files: cd path/to/boost_1_61_0 ./bootstrap.sh --with-libraries=system,filesystem --prefix=path/to/installation/prefix ./b2 install link=static (3) Set your BOOST_LIB_PATH and BOOST_INC_PATH environment variables: export BOOST_LIB_PATH=\"path/to/installation/prefix/lib\" export BOOST_INC_PATH=\"path/to/installation/prefix/include\" (4) Finally, compile flocky (parallel version): make -f Makefile.mpi or a serial version: make -f Makefile.serial","title":"Install procedure:"}]}